// Copyright 2021 Tier IV, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef @CPP_INCLUDE_GUARD@
#define @CPP_INCLUDE_GUARD@

#include <string>
#include <utility>
#include "@CPP_SERVICE_HEADER@"
#include "@CPP_TYPE_HEADER@"

namespace @CPP_NAMESPACE@
{

struct API
{
  using ServiceType = @CPP_TYPE_NAME@;
  using RequestType = @CPP_TYPE_NAME@::Request;
  using ResponseType = @CPP_TYPE_NAME@::Response;
  using Service = @CPP_SERVICE@<ServiceType>::SharedPtr;
  using Client = @CPP_CLIENT@<ServiceType>::SharedPtr;

  static inline std::string get_spec_name()
  {
    return "@API_SPEC_NAME@";
  }

  static inline std::string get_impl_name()
  {
    return "@API_IMPL_NAME@";
  }

  static inline rmw_qos_profile_t get_default_service_qos()
  {
    return rmw_qos_profile_services_default;
  }

  static inline rmw_qos_profile_t get_default_client_qos()
  {
    return rmw_qos_profile_services_default;
  }

  template<class NodeT, class CallbackT>
  static Service create_service(
    NodeT * node,
    CallbackT && callback,
    rclcpp::CallbackGroup::SharedPtr group = nullptr)
  {
    return node->template create_service<ServiceType>(
      get_impl_name(),
      std::forward<CallbackT>(callback),
      get_default_service_qos(),
      group);
  }

  template<class NodeT>
  static Client create_client(
    NodeT * node,
    rclcpp::CallbackGroup::SharedPtr group = nullptr)
  {
    return node->template create_client<ServiceType>(
      get_impl_name(),
      get_default_client_qos(),
      group);
  }
};

}  // namespace @CPP_NAMESPACE@

#endif  // @CPP_INCLUDE_GUARD@
